{"version":3,"sources":["components/FormBody/SelectField/selectfield.module.scss","components/FormBody/CheckboxField/checkboxfield.module.scss","components/FormBody/InputField/InputField.jsx","components/FormBody/CheckboxField/CheckboxField.jsx","components/FormBody/SelectField/SelectField.jsx","components/FormBody/FormBody.jsx","App.js","index.js","components/FormBody/InputField/inputfield.module.scss","components/FormBody/formbody.module.scss"],"names":["module","exports","InputField","id","label","placeholder","formikProps","touched","error","className","s","block","htmlFor","inputField","type","lineError","CheckboxField","container","checkmark","SelectField","arrOptions","setLanguage","setTouchedLanguage","useState","menuToggle","setMenuToggle","changeMenu","e","relatedTarget","search","arrOptionsComponents","length","map","v","value","item","onClick","onBlur","hideMenu","showMenu","FormBody","formik","useFormik","initialValues","firstName","email","phoneNumber","language","userAgree","validationSchema","Yup","required","min","max","matches","test","replace","oneOf","onSubmit","values","str","prepareData","reduce","t","i","alert","console","log","header","headTitle","href","link","handleSubmit","form","getFieldProps","errors","setFieldValue","target","setFieldTouched","subBtn","dirty","isValid","subBtn__disabled","disabled","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2da5ff0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"selectfield_block__185Pj\",\"inputField\":\"selectfield_inputField__DLD5C\",\"hideMenu\":\"selectfield_hideMenu__3NVMn\",\"showMenu\":\"selectfield_showMenu__16S0C\",\"item\":\"selectfield_item__gPvV9\",\"lineError\":\"selectfield_lineError__2x9Iq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"checkboxfield_block__3ve1i\",\"container\":\"checkboxfield_container__2bH7B\",\"inputField\":\"checkboxfield_inputField__2_PhR\",\"checkmark\":\"checkboxfield_checkmark__3JnGW\",\"lineError\":\"checkboxfield_lineError__2O3j_\"};","import React from 'react'\r\nimport s from './inputfield.module.scss'\r\n\r\nconst InputField = ({id, label,placeholder , formikProps, touched,  error})=>{\r\n\treturn <div className={s.block}>\r\n\t\t<label htmlFor={id}>{label}</label>\r\n\t\t<input\r\n\t\t\tid={id} className={s.inputField}\r\n\t\t\ttype=\"text\" {...formikProps}\r\n\t\t\tplaceholder={placeholder}\r\n\t\t/>\r\n\t\t{/* Error message if error exist*/}\r\n\t\t{touched && error\r\n\t\t\t? (<div className={s.lineError}>{error}</div>)\r\n\t\t\t: null}\r\n\t</div>\r\n};\r\n\r\nexport default InputField;","import React from 'react'\r\nimport s from './checkboxfield.module.scss'\r\n\r\nconst CheckboxField = ({id, label, formikProps, touched,  error})=>{\r\n\treturn <div className={s.block}>\r\n\t\t<label htmlFor={id} className={s.container}>{label}\r\n\t\t\t<input\r\n\t\t\t\tid={id} className={s.inputField}\r\n\t\t\t\ttype=\"checkbox\" {...formikProps}\r\n\t\t\t/>\r\n\t\t\t<span className={s.checkmark}/>\r\n\t\t</label>\r\n\t\t{/* Error message if error exist */}\r\n\t\t{touched && error\r\n\t\t\t? (<div className={s.lineError}>{error}</div>)\r\n\t\t\t: null}\r\n\t</div>\r\n};\r\n\r\nexport default CheckboxField;","import React, {useState, useEffect} from 'react'\r\nimport s from './selectfield.module.scss'\r\n\r\nconst SelectField = ({\r\n                         id,\r\n                         label,\r\n                         formikProps,\r\n                         touched,\r\n                         error,\r\n                         arrOptions,\r\n                         setLanguage,\r\n                         setTouchedLanguage\r\n                     }) => {\r\n\t/* hide/show options for drop-down menu*/\r\n    let [menuToggle, setMenuToggle] = useState(false);\r\n\r\n    const changeMenu = (e) => {/* if click on menu item -> pass else hide/show menu*/\r\n        if (!e.relatedTarget?.className.search('item')) {\r\n        \t// set touched in formik\r\n            setTouchedLanguage();\r\n            // hide menu\r\n            setMenuToggle(!menuToggle)\r\n        }\r\n    };\r\n\r\n    const arrOptionsComponents = arrOptions.length/* if options -> create menu components*/\r\n        ? arrOptions.map(v => <button value={v}\r\n                                      className={s.item}\r\n                                      onClick={e => {\r\n                                          setLanguage(e);\r\n                                          setMenuToggle(!menuToggle)\r\n                                      }}\r\n                                      type=\"button\"\r\n                                      key={v}>{v}</button>)\r\n        : null;\r\n\r\n    return <div className={s.block}>\r\n        <label htmlFor={id}>{label}\r\n        \t{/* main button like select input */}\r\n            <input id={id} className={s.inputField} {...formikProps}\r\n                   value={formikProps.value || 'Язык'}\r\n                   onClick={changeMenu} onBlur={menuToggle ? changeMenu : null} type='button'/>\r\n            {/* Drop-down menu */}\r\n                   <div className={`${s.hideMenu} ${menuToggle ? s.showMenu : null}`}>\r\n                {arrOptionsComponents}\r\n            </div>\r\n        </label>\r\n\t\t{/* Error message if error exist */}\r\n        {touched && error\r\n            ? (<div className={s.lineError}>{error}</div>)\r\n            : null}\r\n    </div>\r\n};\r\n\r\nexport default SelectField;","import React from 'react'\r\nimport s from './formbody.module.scss'\r\nimport InputField from \"./InputField/InputField\";\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport CheckboxField from \"./CheckboxField/CheckboxField\";\r\nimport SelectField from \"./SelectField/SelectField\";\r\n\r\nconst FormBody = () => {\r\n    const formik = useFormik({\r\n        /* initial values for all form */\r\n        initialValues: {\r\n            firstName: '',\r\n            email: '',\r\n            phoneNumber: '',\r\n            language: '',\r\n            userAgree: false\r\n        },\r\n        /* object with validation properties */\r\n        validationSchema: Yup.object({\r\n            /* input name */\r\n            firstName: Yup.string()/* string from 3 to 50 symbols */\r\n                .required('Обязательное поле')\r\n                .min(3, 'Минимум три символа')\r\n                .max(50, 'Не более 50 символов')\r\n                /* only letters, - and spaces */\r\n                .matches(/^[a-zA-Zа-яА-Я -]+$/g, \"Цифры и символы в имени не допустимы\"),\r\n            /* input email */\r\n            email: Yup.string()/* string with email template less then 40 symbols*/\r\n                .required('Обязательное поле')\r\n                .email('Введите адрес корректно')\r\n                .max(40, \"Не более 40 символов\"),\r\n            /* input phone number */\r\n            phoneNumber: Yup.string()/* string with strict 11 digits and +,-,),( */\r\n                .required('Обязательное поле')\r\n                /* plus only on start of string, only digits and +,-,),( */\r\n                .matches(/^(?:\\s*\\+)?[\\d\\s\\-)(]+$/g, \"Введите корректно номер\")\r\n                /* check that string have 11 digits */\r\n                .test(\"\", \"Номер состоит из 11 цифр\",\r\n                    (value) => value?.replace(/(\\+|\\-|\\s|\\)|\\()/g, '').length === 11),\r\n            /* choose language from drop-down menu */\r\n            language: Yup.string()\r\n                .required('Выберите язык'),\r\n            /* put checkbox for user agreement */\r\n            userAgree: Yup.boolean()\r\n                .required('Обязательное поле')\r\n                .oneOf([true], 'Обязательно ознакомтись с условиями использования.')\r\n        }),\r\n        /* Submit function */\r\n        onSubmit: values => {\r\n\r\n            const templatePhone = (str) => {\r\n                return [...str.replace(/(\\+|\\-|\\s|\\)|\\()/g, '')].reduce((t,v,i)=>{\r\n                if(i===1||i===4||i===7||i===9){\r\n                    return t + \"-\" + v\r\n                }else{\r\n                    return t + v\r\n                }},'+')\r\n            }\r\n\r\n            const prepareData = `\r\n            Имя:            ${values.firstName}\r\n            Email:          ${values.email}\r\n            Телефон:    ${templatePhone(values.phoneNumber)}\r\n            Язык:           ${values.language}`\r\n\r\n            alert(prepareData)\r\n            console.log(prepareData)\r\n        }\r\n    });\r\n    /* set new value for language from Select component */\r\n    const setLanguage = e => formik.setFieldValue('language', e.target.value);\r\n    /* set touched modification for language */\r\n    const setTouchedLanguage = () => formik.setFieldTouched('language', true);\r\n\r\n    return <div className={s.block}>\r\n        {/* Header block */}\r\n        <div className={s.header}>\r\n            <h1 className={s.headTitle}>Регистрация</h1>\r\n            <span>Уже есть аккаунт? <a href=\"/\" className={s.link}>Войти</a></span>\r\n        </div>\r\n        {/* Form area */}\r\n        <form onSubmit={formik.handleSubmit} className={s.form}>\r\n            {/* input name */}\r\n            <InputField id={`firstName`}\r\n                        label={`Имя`}\r\n                        placeholder={`Введите Ваше имя`}\r\n                        formikProps={formik.getFieldProps('firstName')}\r\n                        touched={formik.touched.firstName}\r\n                        error={formik.errors.firstName}/>\r\n            {/* input email */}\r\n            <InputField id={`email`}\r\n                        label={`Email`}\r\n                        placeholder={`Введите ваш email`}\r\n                        formikProps={formik.getFieldProps('email')}\r\n                        touched={formik.touched.email}\r\n                        error={formik.errors.email}/>\r\n            {/* input phone number */}\r\n            <InputField id={`phoneNumber`}\r\n                        label={`Номер телефона`}\r\n                        placeholder={`Введите номер телефона`}\r\n                        formikProps={formik.getFieldProps('phoneNumber')}\r\n                        touched={formik.touched.phoneNumber}\r\n                        error={formik.errors.phoneNumber}/>\r\n            {/* choose language from drop-down menu */}\r\n            <SelectField id={`language`}\r\n                         label={`Язык`}\r\n                         formikProps={formik.getFieldProps('language')}\r\n                         touched={formik.touched.language}\r\n                         error={formik.errors.language}\r\n                         arrOptions={[`Русский`, \"Английский\", `Китайский`, \"Испанский\"]}\r\n                         setLanguage={setLanguage}\r\n                         setTouchedLanguage={setTouchedLanguage}/>\r\n            {/* put checkbox for user agreement */}\r\n            <CheckboxField id={`userAgree`}\r\n                           label={<>Принимаю <a href='/' className={s.link}>условия</a> использования</>}\r\n                           formikProps={formik.getFieldProps('userAgree')}\r\n                           touched={formik.touched.userAgree}\r\n                           error={formik.errors.userAgree}/>\r\n            {/* if all fields is correct -> submit for all form */}\r\n            <button type='submit'\r\n                    className={`${s.subBtn} ${!formik.dirty || !formik.isValid\r\n                        ? s.subBtn__disabled\r\n                        : null}`}\r\n                    disabled={!formik.dirty || !formik.isValid}>\r\n                Зарегистрироватся\r\n            </button>\r\n        </form>\r\n    </div>\r\n};\r\n\r\nexport default FormBody;","import React from 'react'\nimport FormBody from \"./components/FormBody/FormBody\";\n\nfunction App() {\n  return (\n    <FormBody />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"inputfield_block__2Tgur\",\"inputField\":\"inputfield_inputField__3_tcx\",\"lineError\":\"inputfield_lineError__2xO5A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"formbody_block__26EJS\",\"header\":\"formbody_header__3CIon\",\"headTitle\":\"formbody_headTitle__375Ho\",\"link\":\"formbody_link__2C1uN\",\"subBtn\":\"formbody_subBtn__FkVob\",\"subBtn__disabled\":\"formbody_subBtn__disabled__1AQKg\"};"],"sourceRoot":""}